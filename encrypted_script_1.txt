--[[
    Omega's Ultimate Panel v5.0 (Welcome to the Club Edition)
    - AJOUT : Une animation de bienvenue et une musique se lancent après avoir entré la bonne clé.
    - MODIFICATION : La zone de texte pour la clé est maintenant vide par défaut.
    - Le reste du script est identique à la version 4.1.
]]

-- // Ne pas lancer si le GUI existe déjà
if game:GetService("CoreGui"):FindFirstChild("OmegaKeyGUI") or game:GetService("CoreGui"):FindFirstChild("OmegaGUI_Container") then
    print("Le Panel d'Omega est déjà en place, arrête de spammer ! 🤣")
    return
end

-- // =================================================================================
-- // SECTION 0: ANIMATION DE DÉMARRAGE CINÉMATIQUE (INCHANGÉE)
-- // =================================================================================
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local PlayerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")

local function playSound(soundId, volume, duration, isLooped)
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://" .. soundId
    sound.Volume = volume or 1
    sound.Looped = isLooped or false
    sound.Parent = PlayerGui
    sound:Play()
    if duration then task.delay(duration, function() if sound then sound:Destroy() end end) else return sound end
end

task.spawn(function()
    local IntroGui = Instance.new("ScreenGui", CoreGui)
    IntroGui.Name = "OmegaIntro"
    IntroGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    IntroGui.ResetOnSpawn = false
    local Background = Instance.new("Frame", IntroGui)
    Background.Size = UDim2.new(1, 0, 1, 0)
    Background.BackgroundColor3 = Color3.new(0, 0, 0)
    local letters = {"Ω", "M", "E", "G", "A"}
    local letterLabels = {}
    local startY = 0.45
    local totalWidth = 0.8
    local spacing = totalWidth / #letters
    for i, letter in ipairs(letters) do local label = Instance.new("TextLabel", Background); label.Size = UDim2.new(spacing, 0, 0.2, 0); label.Position = UDim2.new(0.1 + (i - 1) * spacing, 0, startY, 0); label.BackgroundTransparency = 1; label.Font = Enum.Font.SourceSansBold; label.TextColor3 = Color3.fromRGB(255, 0, 0); label.Text = letter; label.TextSize = 140; label.TextTransparency = 1; table.insert(letterLabels, label) end
    local Subtitle = Instance.new("TextLabel", Background)
    Subtitle.Size = UDim2.new(1, 0, 0.1, 0); Subtitle.Position = UDim2.new(0, 0, 0.8, 0); Subtitle.BackgroundTransparency = 1; Subtitle.Font = Enum.Font.SourceSansItalic; Subtitle.TextColor3 = Color3.fromRGB(200, 200, 200); Subtitle.Text = "Une création signée..."; Subtitle.TextSize = 24; Subtitle.TextTransparency = 1
    local bgm = playSound("356083533", 0.4, nil, true)
    local heartbeat = playSound("132192244", 0.8, nil, true)
    for i, label in ipairs(letterLabels) do TweenService:Create(label, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0, Position = UDim2.new(label.Position.X.Scale, 0, startY - 0.05, 0)}):Play(); task.wait(0.5) end
    local pulseInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, true); for _, label in ipairs(letterLabels) do TweenService:Create(label, pulseInfo, {TextColor3 = Color3.fromRGB(255, 100, 100)}):Play() end; task.wait(2)
    TweenService:Create(Subtitle, TweenInfo.new(0.5), {TextTransparency = 0}):Play(); task.wait(0.5)
    if heartbeat then heartbeat:Stop(); heartbeat:Destroy() end
    playSound("184223978", 1, 1)
    for _, label in ipairs(letterLabels) do label.Text = "" end; letterLabels[3].Text = "Ω M E G A"; letterLabels[3].TextColor3 = Color3.fromRGB(255, 255, 255); TweenService:Create(letterLabels[3], TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 3, true), {Position = UDim2.new(letterLabels[3].Position.X.Scale, math.random(-5, 5), letterLabels[3].Position.Y.Scale, math.random(-5, 5))}):Play(); task.wait(0.4);
    playSound("140933553", 1, 1)
    Subtitle.Text = "OMEGA"; Subtitle.TextColor3 = Color3.fromRGB(255, 0, 0); task.wait(0.6)
    TweenService:Create(Background, TweenInfo.new(1), {BackgroundTransparency = 1}):Play()
    if bgm then TweenService:Create(bgm, TweenInfo.new(1), {Volume = 0}):Play() end
    task.wait(1)
    if bgm then bgm:Destroy() end
    IntroGui:Destroy()
end)
task.wait(7)

-- // =================================================================================
-- // SECTION 0.5: SYSTÈME DE CLÉ D'ACCÈS
-- // =================================================================================
local KeyGUI = Instance.new("ScreenGui")
KeyGUI.Name = "OmegaKeyGUI"
KeyGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
KeyGUI.ResetOnSpawn = false

local KeyFrame = Instance.new("Frame")
KeyFrame.Name = "KeyFrame"
KeyFrame.Size = UDim2.new(0, 300, 0, 200)
KeyFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
KeyFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
KeyFrame.BorderColor3 = Color3.fromRGB(255, 0, 0)
KeyFrame.BorderSizePixel = 2
KeyFrame.Parent = KeyGUI

local UICornerKey = Instance.new("UICorner")
UICornerKey.CornerRadius = UDim.new(0, 8)
UICornerKey.Parent = KeyFrame

local KeyTitle = Instance.new("TextLabel", KeyFrame)
KeyTitle.Size = UDim2.new(1, 0, 0, 30)
KeyTitle.Position = UDim2.new(0, 0, 0, 10)
KeyTitle.BackgroundTransparency = 1
KeyTitle.Font = Enum.Font.SourceSansBold
KeyTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
KeyTitle.Text = "Veuillez entrer la clé d'accès"
KeyTitle.TextSize = 20

local KeyInput = Instance.new("TextBox", KeyFrame)
KeyInput.Name = "KeyInput"
KeyInput.Size = UDim2.new(1, -40, 0, 40)
KeyInput.Position = UDim2.new(0, 20, 0, 50)
KeyInput.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
KeyInput.BorderColor3 = Color3.fromRGB(80, 80, 80)
KeyInput.Font = Enum.Font.SourceSans
KeyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
KeyInput.TextSize = 18
KeyInput.PlaceholderText = "" -- <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CHANGEMENT ICI
KeyInput.ClearTextOnFocus = false

local SubmitButton = Instance.new("TextButton", KeyFrame)
SubmitButton.Name = "SubmitButton"
SubmitButton.Size = UDim2.new(1, -40, 0, 40)
SubmitButton.Position = UDim2.new(0, 20, 0, 100)
SubmitButton.BackgroundColor3 = Color3.fromRGB(0, 180, 0)
SubmitButton.Font = Enum.Font.SourceSansBold
SubmitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SubmitButton.Text = "Valider"
SubmitButton.TextSize = 20

local DiscordLabel = Instance.new("TextLabel", KeyFrame)
DiscordLabel.Size = UDim2.new(1, 0, 0, 40)
DiscordLabel.Position = UDim2.new(0, 0, 0, 150)
DiscordLabel.BackgroundTransparency = 1
DiscordLabel.Font = Enum.Font.SourceSansItalic
DiscordLabel.TextColor3 = Color3.fromRGB(120, 120, 255)
DiscordLabel.Text = "Pour avoir la clé, rejoins : discord.gg/Z6tfbBcW9M"
DiscordLabel.TextSize = 14

local LinkButton = Instance.new("TextButton", DiscordLabel)
LinkButton.Size = UDim2.new(1, 0, 1, 0)
LinkButton.BackgroundTransparency = 1
LinkButton.Text = ""

LinkButton.MouseButton1Click:Connect(function()
    local discordLink = "https://discord.gg/Z6tfbBcW9M"
    if setclipboard then
        setclipboard(discordLink)
        DiscordLabel.Text = "Lien copié ! Colle-le dans ton navigateur."
        task.wait(3)
        DiscordLabel.Text = "Pour avoir la clé, rejoins : discord.gg/Z6tfbBcW9M"
    else
        DiscordLabel.Text = "Copie manuellement : discord.gg/Z6tfbBcW9M"
    end
end)

KeyGUI.Parent = CoreGui

-- // Fonction pour lancer le panneau principal
local function launchMainPanel()
    -- // =================================================================================
    -- // SECTION 1: CRÉATION DE L'INTERFACE GRAPHIQUE PRINCIPALE
    -- // =================================================================================
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "OmegaGUI_Container"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 280, 0, 350)
    MainFrame.Position = UDim2.new(0.5, -140, 0.5, -175)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BorderColor3 = Color3.fromRGB(255, 0, 0)
    MainFrame.BorderSizePixel = 2
    MainFrame.Active = true
    MainFrame.Draggable = true
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = ScreenGui
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = MainFrame
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    local UICornerTitle = UICorner:Clone()
    UICornerTitle.Parent = TitleBar
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Size = UDim2.new(1, -30, 1, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = Enum.Font.SourceSansBold
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.Text = "Omega school RP #FR"
    TitleLabel.TextSize = 18
    TitleLabel.Parent = TitleBar
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 30, 1, 0)
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.BackgroundColor3 = TitleBar.BackgroundColor3
    CloseButton.BackgroundTransparency = 0.5
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 20
    CloseButton.Parent = TitleBar
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "ToggleButton"
    ToggleButton.Size = UDim2.new(0, 60, 0, 60)
    ToggleButton.Position = UDim2.new(0, 20, 0.5, -30)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    ToggleButton.BorderColor3 = Color3.fromRGB(255, 0, 0)
    ToggleButton.BorderSizePixel = 2
    ToggleButton.Font = Enum.Font.SourceSansBold
    ToggleButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    ToggleButton.Text = "Ω"
    ToggleButton.TextSize = 40
    ToggleButton.Parent = ScreenGui
    local UICornerToggle = UICorner:Clone()
    UICornerToggle.Parent = ToggleButton
    local ScrollingContainer = Instance.new("ScrollingFrame")
    ScrollingContainer.Name = "ScrollingContainer"
    ScrollingContainer.Size = UDim2.new(1, 0, 1, -30)
    ScrollingContainer.Position = UDim2.new(0, 0, 0, 30)
    ScrollingContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    ScrollingContainer.BorderSizePixel = 0
    ScrollingContainer.CanvasSize = UDim2.new(0, 0, 0, 450)
    ScrollingContainer.ScrollBarImageColor3 = Color3.fromRGB(255, 0, 0)
    ScrollingContainer.ScrollBarThickness = 6
    ScrollingContainer.Parent = MainFrame
    local EspToggleButton = Instance.new("TextButton", ScrollingContainer)
    EspToggleButton.Name = "EspToggleButton"
    EspToggleButton.Size = UDim2.new(1, -20, 0, 30)
    EspToggleButton.Position = UDim2.new(0, 10, 0, 10)
    EspToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    EspToggleButton.Font = Enum.Font.SourceSansBold
    EspToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    EspToggleButton.Text = "ESP VIP [OFF]"
    EspToggleButton.TextSize = 16
    local UICornerEsp = UICorner:Clone()
    UICornerEsp.Parent = EspToggleButton
    local FarmToggleButton = Instance.new("TextButton", ScrollingContainer)
    FarmToggleButton.Name = "FarmToggleButton"
    FarmToggleButton.Size = UDim2.new(1, -20, 0, 30)
    FarmToggleButton.Position = UDim2.new(0, 10, 0, 50)
    FarmToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    FarmToggleButton.Font = Enum.Font.SourceSansBold
    FarmToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    FarmToggleButton.Text = "Auto Farm Concierge [OFF]"
    FarmToggleButton.TextSize = 16
    local UICornerFarm = UICorner:Clone()
    UICornerFarm.Parent = FarmToggleButton
    local FarmExplanation = Instance.new("TextLabel", ScrollingContainer)
    FarmExplanation.Name = "FarmExplanation"
    FarmExplanation.Size = UDim2.new(1, -20, 0, 80)
    FarmExplanation.Position = UDim2.new(0, 10, 0, 85)
    FarmExplanation.BackgroundTransparency = 1
    FarmExplanation.Font = Enum.Font.SourceSans
    FarmExplanation.TextColor3 = Color3.fromRGB(200, 200, 200)
    FarmExplanation.Text = "1. Prenez le métier 'Concierge'.\n2. Équipez le balai.\n3. Activez le bouton Auto Farm Concierge.\nÇa vous rapporte 84€ toutes les 2 minutes."
    FarmExplanation.TextSize = 14
    FarmExplanation.TextWrapped = true
    FarmExplanation.TextXAlignment = Enum.TextXAlignment.Left
    local SpeedToggleButton = Instance.new("TextButton", ScrollingContainer)
    SpeedToggleButton.Name = "SpeedToggleButton"
    SpeedToggleButton.Size = UDim2.new(1, -20, 0, 30)
    SpeedToggleButton.Position = UDim2.new(0, 10, 0, 175)
    SpeedToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    SpeedToggleButton.Font = Enum.Font.SourceSansBold
    SpeedToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    SpeedToggleButton.Text = "Augmenter la vitesse [OFF]"
    SpeedToggleButton.TextSize = 16
    local UICornerSpeed = UICorner:Clone()
    UICornerSpeed.Parent = SpeedToggleButton
    local GardenerToggleButton = Instance.new("TextButton", ScrollingContainer)
    GardenerToggleButton.Name = "GardenerToggleButton"
    GardenerToggleButton.Size = UDim2.new(1, -20, 0, 30)
    GardenerToggleButton.Position = UDim2.new(0, 10, 0, 215)
    GardenerToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    GardenerToggleButton.Font = Enum.Font.SourceSansBold
    GardenerToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    GardenerToggleButton.Text = "Auto Farm Jardinier [OFF]"
    GardenerToggleButton.TextSize = 16
    local UICornerGardener = UICorner:Clone()
    UICornerGardener.Parent = GardenerToggleButton
    local GardenerExplanation = Instance.new("TextLabel", ScrollingContainer)
    GardenerExplanation.Name = "GardenerExplanation"
    GardenerExplanation.Size = UDim2.new(1, -20, 0, 80)
    GardenerExplanation.Position = UDim2.new(0, 10, 0, 250)
    GardenerExplanation.BackgroundTransparency = 1
    GardenerExplanation.Font = Enum.Font.SourceSans
    GardenerExplanation.TextColor3 = Color3.fromRGB(200, 200, 200)
    GardenerExplanation.Text = "1. Prenez le rôle 'Jardinier'.\n2. Équipez l'arrosoir.\n3. Activez le bouton Auto Farm Jardinier.\nÇa vous rapporte 128€ toutes les 2 minutes."
    GardenerExplanation.TextSize = 14
    GardenerExplanation.TextWrapped = true
    GardenerExplanation.TextXAlignment = Enum.TextXAlignment.Left
    -- // =================================================================================
    -- // SECTION 2: LOGIQUE DES SCRIPTS
    -- // =================================================================================
    local Players, RunService, UserInputService, Workspace = game:GetService("Players"), game:GetService("RunService"), game:GetService("UserInputService"), game:GetService("Workspace")
    local LocalPlayer = Players.LocalPlayer
    CloseButton.MouseButton1Click:Connect(function() ScreenGui:Destroy() end)
    ToggleButton.MouseButton1Click:Connect(function() MainFrame.Visible = not MainFrame.Visible end)
    local dragging, dragStart, startPos = false, nil, nil
    MainFrame.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then dragging, dragStart, startPos = true, input.Position, MainFrame.Position end end)
    UserInputService.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then dragging = false end end)
    MainFrame.InputChanged:Connect(function(input) if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then local delta = input.Position - dragStart; MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y) end end)
    local ESP_ENABLED = false; local ESPContainer = Instance.new("Folder", ScreenGui); ESPContainer.Name = "ESP_Container"; local BADGE_NAME = "Staff"; EspToggleButton.MouseButton1Click:Connect(function() ESP_ENABLED = not ESP_ENABLED; EspToggleButton.Text = "ESP VIP [" .. (ESP_ENABLED and "ON" or "OFF") .. "]"; EspToggleButton.BackgroundColor3 = ESP_ENABLED and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(255, 0, 0); if not ESP_ENABLED then ESPContainer:ClearAllChildren() end end); local function CreateOrUpdateESP(player) if not player or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end; local espName = "ESP_" .. player.Name; local esp = ESPContainer:FindFirstChild(espName); if not esp then esp = Instance.new("BillboardGui", ESPContainer); esp.Name = espName; esp.AlwaysOnTop = true; esp.Size = UDim2.new(0, 200, 0, 50); esp.Adornee = player.Character.HumanoidRootPart; local textLabel = Instance.new("TextLabel", esp); textLabel.Name = "NameLabel"; textLabel.BackgroundTransparency = 1; textLabel.Size = UDim2.new(1, 0, 1, 0); textLabel.Font = Enum.Font.SourceSansBold; textLabel.FontSize = Enum.FontSize.Size18; textLabel.TextColor3 = Color3.fromRGB(255, 0, 0); textLabel.Text = player.Name .. " [VIP OU PREMIUIM]"; textLabel.TextStrokeTransparency = 0 end; esp.Enabled = (player.Character.Humanoid.Health > 0) end; RunService.RenderStepped:Connect(function() if not ESP_ENABLED then return end; local staffUsernames = {}; local playerGui = LocalPlayer:FindFirstChild("PlayerGui"); if not playerGui then return end; local bannerGui = playerGui:FindFirstChild("BannersGui"); if not bannerGui then return end; for _, banner in pairs(bannerGui:GetChildren()) do if banner:FindFirstChild(BADGE_NAME, true) then local username = banner.Name:gsub("_Banner", ""); if not table.find(staffUsernames, username) then table.insert(staffUsernames, username) end end end; for _, esp in pairs(ESPContainer:GetChildren()) do local playerName = esp.Name:gsub("ESP_", ""); if not table.find(staffUsernames, playerName) then esp:Destroy() end end; for _, username in pairs(staffUsernames) do local player = Players:FindFirstChild(username); if player and player ~= LocalPlayer then CreateOrUpdateESP(player) end end end)
    local FARM_ENABLED = false; local farmThread = nil; FarmToggleButton.MouseButton1Click:Connect(function() FARM_ENABLED = not FARM_ENABLED; FarmToggleButton.Text = "Auto Farm Concierge [" .. (FARM_ENABLED and "ON" or "OFF") .. "]"; FarmToggleButton.BackgroundColor3 = FARM_ENABLED and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(255, 0, 0); if FARM_ENABLED and not farmThread then print("Omega Auto Farm: ACTIVÉ."); farmThread = task.spawn(function() while FARM_ENABLED do local TachesFolder = Workspace:FindFirstChild("Taches"); if TachesFolder then for _, obj in ipairs(TachesFolder:GetDescendants()) do if obj:IsA("ProximityPrompt") and obj.Enabled then fireproximityprompt(obj) end end end; task.wait(2) end; print("Omega Auto Farm: DÉSACTIVÉ."); farmThread = nil end) end end)
    local SPEED_ENABLED = false; local originalSpeed = 16; if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then originalSpeed = LocalPlayer.Character.Humanoid.WalkSpeed end; LocalPlayer.CharacterAdded:Connect(function(character) originalSpeed = character:WaitForChild("Humanoid").WalkSpeed; task.wait(0.1); if SPEED_ENABLED and character:FindFirstChild("Humanoid") then character.Humanoid.WalkSpeed = 34 end end); SpeedToggleButton.MouseButton1Click:Connect(function() SPEED_ENABLED = not SPEED_ENABLED; SpeedToggleButton.Text = "Augmenter la vitesse [" .. (SPEED_ENABLED and "ON" or "OFF") .. "]"; SpeedToggleButton.BackgroundColor3 = SPEED_ENABLED and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(255, 0, 0); if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then if SPEED_ENABLED then LocalPlayer.Character.Humanoid.WalkSpeed = 34 else LocalPlayer.Character.Humanoid.WalkSpeed = originalSpeed end end end)
    local GARDENER_ENABLED = false; local gardenerThreads = {}; local function startGardenerClick(prompt) if gardenerThreads[prompt] then return end; local thread = task.spawn(function() while GARDENER_ENABLED and prompt and prompt.Parent do if prompt.Enabled then fireproximityprompt(prompt) end; task.wait(2) end end); gardenerThreads[prompt] = thread end; local function processFeuillage(part) if part.Name == "Feuillage" then local prompt = part:FindFirstChildOfClass("ProximityPrompt"); if prompt then prompt.HoldDuration = 0; prompt.MaxActivationDistance = math.huge; if GARDENER_ENABLED then startGardenerClick(prompt) end end end end; GardenerToggleButton.MouseButton1Click:Connect(function() GARDENER_ENABLED = not GARDENER_ENABLED; GardenerToggleButton.Text = "Auto Farm Jardinier [" .. (GARDENER_ENABLED and "ON" or "OFF") .. "]"; GardenerToggleButton.BackgroundColor3 = GARDENER_ENABLED and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(255, 0, 0); if GARDENER_ENABLED then print("Omega Gardener Farm: ACTIVÉ."); for _, descendant in ipairs(Workspace:GetDescendants()) do processFeuillage(descendant) end else print("Omega Gardener Farm: DÉSACTIVÉ."); for _, thread in pairs(gardenerThreads) do task.cancel(thread) end; gardenerThreads = {} end end); Workspace.DescendantAdded:Connect(function(descendant) if GARDENER_ENABLED then processFeuillage(descendant) end end)
    ScreenGui.Parent = CoreGui
    print("Le Panel Ultime d'Omega v5.0 (Welcome to the Club Edition) est chargé ! 💰")
end

-- // Logique de la soumission de la clé
SubmitButton.MouseButton1Click:Connect(function()
    if KeyInput.Text == "omegal" then
        -- // NOUVEAU : Lancement de l'animation de bienvenue et de la musique
        local WelcomeGUI = Instance.new("ScreenGui", CoreGui)
        WelcomeGUI.Name = "OmegaWelcomeGUI"
        local WelcomeLabel = Instance.new("TextLabel", WelcomeGUI)
        WelcomeLabel.Size = UDim2.new(1, 0, 1, 0)
        WelcomeLabel.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
        WelcomeLabel.BackgroundTransparency = 0.2
        WelcomeLabel.Font = Enum.Font.SourceSansBold
        WelcomeLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
        WelcomeLabel.Text = "Bienvenue, " .. game.Players.LocalPlayer.Name
        WelcomeLabel.TextSize = 60
        WelcomeLabel.TextTransparency = 1
        
        -- Jouer la musique de bienvenue
        local welcomeSound = Instance.new("Sound")
        welcomeSound.SoundId = "rbxassetid://1842779647"
        welcomeSound.Parent = PlayerGui
        welcomeSound:Play()
        task.delay(7, function() if welcomeSound then welcomeSound:Destroy() end end)

        -- Animation de bienvenue
        KeyGUI:Destroy()
        TweenService:Create(WelcomeLabel, TweenInfo.new(1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0, TextSize = 70}):Play()
        task.wait(2)
        TweenService:Create(WelcomeLabel, TweenInfo.new(1, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {TextTransparency = 1, TextSize = 60}):Play()
        task.wait(1)
        
        WelcomeGUI:Destroy()
        launchMainPanel() -- On lance le panneau principal après l'animation
    else
        -- Animation de secousse pour montrer que la clé est fausse
        local originalPos = KeyFrame.Position
        TweenService:Create(KeyFrame, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 3, true), {Position = UDim2.new(originalPos.X.Scale, originalPos.X.Offset + 10, originalPos.Y.Scale, originalPos.Y.Offset)}):Play()
        KeyInput.Text = ""
        KeyInput.PlaceholderText = "Clé incorrecte !"
    end
end)


